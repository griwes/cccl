//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

#include <fstream>
#include <string>
#include <vector>

int main()
{
  std::vector<std::string> aliases = {"__f16_repr = __float_repr<2, 5, 10>", "__bf16_repr = __float_repr<2, 8, 7>"};
  std::vector<std::string> formats = {"f16", "bf16"};

  std::vector<std::string> operations = {"add", "sub", "mul", /*"fma", "neg", "abs", "min", "max", "tanh", "ex2"*/};
  std::vector<std::string> upcast_operations = {};

  std::ofstream out("float-generated.h");

  out << R"XXX(//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

// This is a autogenerated file, we want to ensure that it contains exactly the contentes we want to generate
// clang-format off

#ifndef _LIBCUDACXX__FLOAT_GENERATED
#define _LIBCUDACXX__FLOAT_GENERATED

#include <cuda/std/detail/__config>

#if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
#  pragma GCC system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
#  pragma clang system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
#  pragma system_header
#endif // no system header

#include <cuda/__float/arithmetic.h>
#include <cuda/__float/helpers.h>
#include <cuda/__float/representation.h>

_LIBCUDACXX_BEGIN_NAMESPACE_CUDA

)XXX";

  auto representation_of = [](auto&& format) {
    return "__" + format + "_repr";
  };

  for (auto&& alias : aliases)
  {
    out << "using " << alias << ";\n";
  }
  out << "\n";

  for (auto&& format : formats)
  {
    auto repr = representation_of(format);
    for (auto&& op : operations)
    {
      out << "static _LIBCUDACXX_INLINE_VISIBILITY " << repr << " __cuda_float_" << op << "(" << repr << " __lhs, "
          << repr << " __rhs) {\n";
      out << "  NV_IF_ELSE_TARGET(NV_IS_DEVICE, (\n";
      out << "    using _Tp = __uint_least_t<sizeof(" << repr << ") * CHAR_BIT>;\n";
      out << "    _Tp __lhs_, __rhs_, __result;\n";
      out << "    __aligned_memcpy(__lhs_, __lhs);\n";
      out << "    __aligned_memcpy(__rhs_, __rhs);\n";
      out << "    asm volatile (\"" << op << "." << format
          << " %0, %1, %2;\" : \"=h\"(__result) : \"h\"(__lhs_), \"h\"(__rhs_));\n";
      out << "    " << repr << " __ret;\n";
      out << "    __aligned_memcpy(__ret, __result);\n";
      out << "    return __ret;\n";
      out << "  ), (\n";
      out << "     return __cuda_float_" << op << "(__lhs, __rhs, false);\n";
      out << "  ));\n";
      out << "}\n\n";
    }
  }

  out << R"XXX(_LIBCUDACXX_END_NAMESPACE_CUDA

#endif

// clang-format on
)XXX";
}
