//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

#include <fstream>
#include <string>
#include <vector>

template <class Head>
std::vector<std::string> cartesian_join(const std::string&, const Head& head)
{
  return head;
}

template <class Head, class... Tail>
std::vector<std::string> cartesian_join(const std::string& joiner, const Head& head, const Tail&... tail)
{
  std::vector<std::string> ret;
  auto tail_product = cartesian_join(joiner, tail...);
  ret.reserve(tail_product.size() * head.size());
  for (auto&& elem : head)
  {
    for (auto&& tail_elem : tail_product)
    {
      ret.push_back(elem + joiner + tail_elem);
    }
  }
  return ret;
}

int main()
{
  std::ofstream out("float_test-testcases.h");

  std::vector<std::string> signs = {"cuda::__sign_val::__positive", "cuda::__sign_val::__negative"};

  std::vector<std::string> exponents = {
    "0",
    "1",
    "-1",
    "2",
    "-2",
    "(1ull << (Exponent / 2)) - 1",
    "-static_cast<cuda::std::ptrdiff_t>(1ull << (Exponent / 2))",
    "(1ull << (Exponent - 2)) - 1",
    "-static_cast<cuda::std::ptrdiff_t>(1ull << (Exponent - 2))",
    "(1ull << (Exponent - 1)) - 1",
    "-static_cast<cuda::std::ptrdiff_t>(1ull << (Exponent - 1)) + 1",
  };
  std::vector<std::string> mantissas = {
    "0",
    "1ull << (Mantissa - 1)",
    "1ull << (Mantissa / 2)",
    "1",
    "0b101ull << (Mantissa - 1 - 2)",
    "0b101ull << (Mantissa / 2 - 2)",
    "0b101",
    "0b1001ull << (Mantissa - 1 - 3)",
    "0b1001ull << (Mantissa / 2 - 3)",
    "0b1001",
    "0b10101ull << (Mantissa - 1 - 4)",
    "0b10101ull << (Mantissa / 2 - 4)",
    "0b10101",
    "0b1000001ull << (Mantissa - 1 - 6)",
    "0b1000001ull << (Mantissa / 2 - 6)",
    "0b1000001",
    "(1ull << (Mantissa - 1)) | 0b1",
    "(1ull << (Mantissa / 2)) | 0b1",
    "(1ull << (Mantissa - 1)) | 0b101",
    "(1ull << (Mantissa / 2)) | 0b101",
    "(1ull << (Mantissa - 1)) | 0b100001",
    "(1ull << (Mantissa / 2)) | 0b100001",
  };

  auto cases = cartesian_join(", ", signs, exponents, mantissas);
  cases.push_back("/* inf */ (cuda::__sign_val)2, 0, 0");
  cases.push_back("/* -inf */ (cuda::__sign_val)3, 0, 0");
  cases.push_back("/* nan */ (cuda::__sign_val)4, 0, 0");
  cases.push_back("/* -nan */ (cuda::__sign_val)5, 0, 0");

  out << R"XXX(//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

// This is a autogenerated file, we want to ensure that it contains exactly the contentes we want to generate
// clang-format off

#ifndef TEST_FLOAT_CASES
#define TEST_FLOAT_CASES

#include <cuda/float>
#include <cuda/std/array>
#include <cuda/std/tuple>
#include <cuda/std/type_traits>

)XXX";

  auto total_cases = cases.size();

  out << "template <cuda::std::size_t Exponent, cuda::std::size_t Mantissa>\n";
  out << "__host__ __device__\n";
  out << "cuda::std::array<cuda::std::tuple<cuda::__sign_val, cuda::__int_least_t<Exponent>, "
         "cuda::__uint_least_t<Mantissa + 1>>, "
      << total_cases << "> get_cases() {\n";

  out << "  cuda::std::array<cuda::std::tuple<cuda::__sign_val, cuda::__int_least_t<Exponent>, "
         "cuda::__uint_least_t<Mantissa + 1>>, "
      << total_cases << "> ret = {{\n";

  for (auto&& case_ : cases)
  {
    out << "    { " << case_ << " },\n";
  }

  out << "  }};\n";
  out << "  return ret;\n";
  out << "}\n";

  out << R"XXX(
#endif // TEST_FLOAT_CASES
)XXX";
}
